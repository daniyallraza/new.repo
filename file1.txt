unadd git reset file_name / . for all
unstaged(remove from commit) git restore --staged file_name / . for all 
also use this git rm --cached file_name 
git log to see commit history / --oneline (in short)
.gitignore { agar koi file add ya commit nhi karna n to isme daal ke ignore kardo aur isko
             add commit kardo dusra banda isko access bhi nhi kar saktha}
.gitkeep   {git epmty folder ko track nhi kartha agar epmty folder ko
            track karwana ho to usme .gitkeep daal do}


BRANCH 
 
git branch                                                  {to check current branch}
git branch new_branch_name                                  {creat a new branch}
git switch branch_name                                      {to switch into another branch}
git swtich -c branch_name                                   {it also switch but if branch does'nt eixsts it creat it and switch}
git checkout                                                {same as switch}
git branch -d branch_name                                   {delete branch}
git branch -m <old-branch-name> <new-branch-name>           {remane branch}
git diff <branch-one> <branch-two>                          {do branch difference dekhne ke liye}
git diff <commit-num>..<commit-num>                         {do commit difference dekhne ke liye}

STASH

git stash                                                   {you can switch to another branch without saving or adding}
git stash list                                              {stash list }
git pop                                                     {bring back the chages}
git stash apply                                             {bring back the chages without removing it from list}
git stash pop stash@{0}                                     {to pop a specific stash}
git stash push -m "fix-bugs stash"                          {to name a stash}
git stash save "fix-bugs stash"                             {to name a stash}
git stash drop stash@{0}                                    {stash ko delete kar deta hai bina apply kiye}
git stash clear                                             {delete all stash }


TAG 

git tag <tag-name>                                          {use to tag latest commit (name any commit)}
git tag -a <tag-name> -m "Release 1.0"                      {use to tag commit with msg}
git tag <tag-name> <commit-hash>                            {tag any specific commit by commit hash}
git tag                                                     {list of all tags}
git tag -d <tag-name>                                       {delete any tag}
git push origin <tag-name>                                  {push specific tag to origin}
git push origin --tags                                      {push all tags to oigin}
git show tags                                               {to see tags with msg}


REBASE 
        is used to move or replay the current branch's commits on top of another base branch — 
        usually to update a feature branch with the latest changes from the main branch, without creating a merge commit.
        
        OR 

        Rebase is used to apply the changes of the current branch on top of another branch (like main), to make history
        linear and clean — without creating extra merge commits.

git rebase main                                            {rebase main branch with clone branch avoid using reabse in master }
git rebase --continue                                      {if any conflict occure after solving conflict run this command to continue}


REFLOG  

git reflog                                                 {show you tyhe history of commit even the rebase one}
git reflog <commit-hash>                                   {You can find a specific commit using the following command}
git reset --hard <commit-hash>                             {you can delete all commits till the provided one}
git reset --hard HEAD@{1}                                  {does the same}




GITHUB 

SSH KEY : 
git bash commands
1) ssh-keygen -t ed25519 -C "daniyal06383@gmail.com"
2) eval "$(ssh-agent -s)"
3) ssh-add ~/.ssh/id_ed25519
4) cat ~/.ssh/id_ed25519.pub


GIT REMOTE 

git remote -v                                            {You can check the remote url setting by running the following command}
git remote add origin https://github.com/abc             {add repo url}
git push origin main                                     {git push remote-name branch-name}
git push --force origin main                             {git force push remote-name branch-name}
[git remote add -u <remote-url>                           {no need to write remote-name branch-name again and again to push (upstream remote)}
 git remote add upstream <remote-url>                     {same as git remote add -u <remote-url>}
   This will allow you to run future commands like git pull and git push without specifying the remote name.]

